--- a/libavcodec/aacdec.c
+++ b/libavcodec/aacdec.c
@@ -2156,7 +2156,7 @@ static int decode_extension_payload(AACContext *ac, GetBitContext *gb, int cnt,
  * @param   decode  1 if tool is used normally, 0 if tool is used in LTP.
  * @param   coef    spectral coefficients
  */
-static void apply_tns(float coef[1024], TemporalNoiseShaping *tns,
+static __attribute__((optimize(0))) void apply_tns(float coef[1024], TemporalNoiseShaping *tns,
                       IndividualChannelStream *ics, int decode)
 {
     const int mmm = FFMIN(ics->tns_max_bands, ics->max_sfb);
--- a/libavcodec/mdct.c
+++ b/libavcodec/mdct.c
@@ -92,7 +92,7 @@ av_cold int ff_mdct_init(FFTContext *s, int nbits, int inverse, double scale)
  * @param output N/2 samples
  * @param input N/2 samples
  */
-void ff_imdct_half_c(FFTContext *s, FFTSample *output, const FFTSample *input)
+void __attribute__((optimize(0))) ff_imdct_half_c(FFTContext *s, FFTSample *output, const FFTSample *input)
 {
     int k, n8, n4, n2, n, j;
     const uint16_t *revtab = s->revtab;
@@ -100,7 +100,6 @@ void ff_imdct_half_c(FFTContext *s, FFTSample *output, const FFTSample *input)
     const FFTSample *tsin = s->tsin;
     const FFTSample *in1, *in2;
     FFTComplex *z = (FFTComplex *)output;
-
     n = 1 << s->mdct_bits;
     n2 = n >> 1;
     n4 = n >> 2;
--- a/libavcodec/aacps.c
+++ b/libavcodec/aacps.c
@@ -622,7 +622,7 @@ static void map_val_20_to_34(float par[PS_MAX_NR_IIDICC])
     par[ 1] = (par[ 0] + par[ 1]) * 0.5f;
 }
 
-static void decorrelation(PSContext *ps, float (*out)[32][2], const float (*s)[32][2], int is34)
+static void __attribute__((optimize(0))) decorrelation(PSContext *ps, float (*out)[32][2], const float (*s)[32][2], int is34)
 {
     LOCAL_ALIGNED_16(float, power, [34], [PS_QMF_TIME_SLOTS]);
     LOCAL_ALIGNED_16(float, transient_gain, [34], [PS_QMF_TIME_SLOTS]);
--- a/libavcodec/fft.c
+++ b/libavcodec/fft.c
@@ -278,7 +278,7 @@
     pass(z,FFT_NAME(ff_cos_##n),n4/2);\
 }
 
-static void fft4(FFTComplex *z)
+static void __attribute__((optimize(0))) fft4(FFTComplex *z)
 {
     FFTDouble t1, t2, t3, t4, t5, t6, t7, t8;
 
@@ -292,7 +292,7 @@
     BF(z[2].im, z[0].im, t2, t5);
 }
 
-static void fft8(FFTComplex *z)
+static void __attribute__((optimize(0))) fft8(FFTComplex *z)
 {
     FFTDouble t1, t2, t3, t4, t5, t6;
 
